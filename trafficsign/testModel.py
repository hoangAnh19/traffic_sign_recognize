import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import cv2
import matplotlib.pyplot as plt

# Load model
model_path = "model/model.h5"
model = load_model(model_path)
print("‚úÖ Model ƒë√£ load th√†nh c√¥ng!")

# K√≠ch th∆∞·ªõc ·∫£nh (d·ª±a theo model)
img_height, img_width = 32, 32  # C·∫≠p nh·∫≠t theo model c·ªßa b·∫°n

# Nh√£n class (n·∫øu c√≥)
labels = [f"Class {i}" for i in range(43)]  # Thay b·∫±ng danh s√°ch th·ª±c t·∫ø

def predict_image(img_path):
    try:
        # ƒê·ªçc v√† hi·ªÉn th·ªã ·∫£nh
        img = cv2.imread(img_path)
        if img is None:
            print("‚ùå L·ªói: Kh√¥ng th·ªÉ load ·∫£nh. Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n!")
            return

        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = cv2.resize(img, (img_height, img_width))

        # Hi·ªÉn th·ªã ·∫£nh
        plt.imshow(img)
        plt.axis("off")
        plt.show()

        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        img = np.array(img).astype('float32') / 255.0  # Chu·∫©n h√≥a v·ªÅ [0,1]
        img = np.expand_dims(img, axis=0)  # (1, 32, 32, 3)

        # D·ª± ƒëo√°n
        predictions = model.predict(img)
        print(f"üü¢ K·∫øt qu·∫£ d·ª± ƒëo√°n (raw): {predictions}")

        predicted_class = np.argmax(predictions)  # L·∫•y class c√≥ x√°c su·∫•t cao nh·∫•t
        confidence = np.max(predictions)  # X√°c su·∫•t l·ªõn nh·∫•t

        print(f"üîπ D·ª± ƒëo√°n: {labels[predicted_class]} (ƒê·ªô tin c·∫≠y: {confidence:.2%})")

    except Exception as e:
        print(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {e}")

# üñº Test v·ªõi ·∫£nh
test_image_path = "test.jpg"  # Thay b·∫±ng ·∫£nh th·ª±c t·∫ø
predict_image(test_image_path)
